rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Função auxiliar para verificar se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função para verificar se o usuário é o proprietário do documento
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isPremiumUser(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.planType in ['pro', 'enterprise'];
    }
    
    // Função para validar estrutura de dados
    function isValidTransaction() {
      let data = request.resource.data;
      let basicFields = data.keys().hasAll(['userId', 'amount', 'date', 'category', 'type']) &&
             data.userId is string &&
             data.amount is number &&
             (data.date is timestamp || data.date is string) &&
             data.category is string &&
             (data.type == 'income' || data.type == 'expense');

      let proFieldsValid = true;
      let hasProFields = data.keys().hasAny(['recorrencia', 'anexos', 'lembretes']);

      return basicFields && (!hasProFields || (
        (!data.keys().hasAny(['recorrencia']) || (
          data.recorrencia.frequency in ['monthly', 'weekly', 'yearly'] &&
          (data.recorrencia.nextDueDate is timestamp || data.recorrencia.nextDueDate is string || !data.recorrencia.keys().hasAny(['nextDueDate'])) &&
          data.recorrencia.active is bool
        )) &&
        (!data.keys().hasAny(['anexos']) || (
          data.anexos is list &&
          data.anexos.size() <= 10
        )) &&
        (!data.keys().hasAny(['lembretes']) || (
          data.lembretes is list &&
          data.lembretes.size() <= 5
        ))
      ));
    }
    
    // Usuários
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Contas financeiras
    match /accounts/{accountId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.userId) &&
                   request.resource.data.keys().hasAll(['name', 'balance', 'userId']);
      allow update: if isAuthenticated() && 
                   isOwner(resource.data.userId) &&
                   request.resource.data.keys().hasAll(['name', 'balance', 'userId']);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Transações
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.userId) && 
                   isValidTransaction() &&
                   (
                     !request.resource.data.keys().hasAny(['recorrencia', 'anexos', 'lembretes']) ||
                     isPremiumUser(request.auth.uid)
                   );
      
      allow update: if isAuthenticated() && 
                   isOwner(resource.data.userId) && 
                   isValidTransaction() &&
                   (
                     !request.resource.data.keys().hasAny(['recorrencia', 'anexos', 'lembretes']) ||
                     isPremiumUser(request.auth.uid)
                   );
      
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Anexos (subcoleção de transações)
    match /transactions/{transactionId}/attachments/{attachmentId} {
      allow read: if isAuthenticated() && 
                   isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
      
      allow write: if isAuthenticated() && 
                   isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId) &&
                   isPremiumUser(request.auth.uid);
    }

    // Lembretes (subcoleção de transações)
    match /transactions/{transactionId}/reminders/{reminderId} {
      allow read: if isAuthenticated() && 
                   isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
      
      allow write: if isAuthenticated() && 
                   isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId) &&
                   isPremiumUser(request.auth.uid);
    }
    
    // Categorias
    match /categories/{categoryId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.userId) &&
                   request.resource.data.keys().hasAll(['name', 'type', 'userId']);
      allow update: if isAuthenticated() && 
                   isOwner(resource.data.userId) &&
                   request.resource.data.keys().hasAll(['name', 'type', 'userId']);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Metas financeiras
    match /goals/{goalId} {
      allow read: if isAuthenticated() && (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Configurações do usuário
    match /settings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Proteção padrão: negar acesso a tudo que não foi explicitamente permitido
    match /{document=**} {
      allow read, write: if false;
    }

    // Regra para teste de conectividade
    match /connectivity_test/{docId} {
      allow read: if isAuthenticated();
    }
  }
} 